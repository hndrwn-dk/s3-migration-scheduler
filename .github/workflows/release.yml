name: 🚀 Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: false

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io

jobs:
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            IS_PRERELEASE=$(echo "$VERSION" | grep -E "(alpha|beta|rc)" && echo "true" || echo "false")
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "is-prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          
          echo "🏷️ Release Version: $VERSION"
          echo "🔖 Pre-release: $IS_PRERELEASE"

      - name: ✅ Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9-]+)*$ ]]; then
            echo "❌ Invalid version format: ${{ steps.version.outputs.version }}"
            echo "Expected format: v1.2.3 or v1.2.3-beta.1"
            exit 1
          fi

  build-docker-images:
    name: 🐳 Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      backend-digest: ${{ steps.backend.outputs.digest }}
      frontend-digest: ${{ steps.frontend.outputs.digest }}
      allinone-digest: ${{ steps.allinone.outputs.digest }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies and build frontend
        run: |
          npm ci
          cd client && npm ci && npm run build

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registries
        run: |
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: 🏗️ Build and push backend image
        id: backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/s3-migration-scheduler-backend:${{ needs.validate-release.outputs.version }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/s3-migration-scheduler-backend:latest
            ${{ env.REGISTRY }}/${{ github.repository }}-backend:${{ needs.validate-release.outputs.version }}
            ${{ env.REGISTRY }}/${{ github.repository }}-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push frontend image
        id: frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/s3-migration-scheduler-frontend:${{ needs.validate-release.outputs.version }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/s3-migration-scheduler-frontend:latest
            ${{ env.REGISTRY }}/${{ github.repository }}-frontend:${{ needs.validate-release.outputs.version }}
            ${{ env.REGISTRY }}/${{ github.repository }}-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push all-in-one image
        id: allinone
        run: |
          # Create temporary all-in-one Dockerfile
          cat > Dockerfile.allinone << 'EOF'
          FROM node:18-alpine AS build-frontend
          WORKDIR /app
          COPY client/package*.json ./
          RUN npm ci
          COPY client/ .
          RUN npm run build
          
          FROM node:18-alpine AS production
          RUN apk add --no-cache python3 make g++ sqlite nginx
          WORKDIR /app
          COPY server/package*.json ./
          RUN npm ci --only=production
          COPY server/ .
          COPY --from=build-frontend /app/build /app/public
          
          COPY <<'NGINXEOF' /etc/nginx/conf.d/default.conf
          server {
              listen 80;
              root /app/public;
              index index.html;
              location / { try_files \$uri \$uri/ /index.html; }
              location /api/ { proxy_pass http://localhost:5000; }
              location /ws { 
                  proxy_pass http://localhost:5000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "Upgrade";
              }
          }
          NGINXEOF
          
          COPY <<'STARTEOF' /app/start.sh
          #!/bin/sh
          nginx &
          exec node index.js
          STARTEOF
          
          RUN chmod +x /app/start.sh
          EXPOSE 80 5000
          CMD ["/app/start.sh"]
          EOF
          
          # Build and push
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --file Dockerfile.allinone \
            --tag ${{ secrets.DOCKER_HUB_USERNAME }}/s3-migration-scheduler:${{ needs.validate-release.outputs.version }} \
            --tag ${{ secrets.DOCKER_HUB_USERNAME }}/s3-migration-scheduler:latest \
            --tag ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.validate-release.outputs.version }} \
            --tag ${{ env.REGISTRY }}/${{ github.repository }}:latest \
            --push .

  build-desktop-apps:
    name: 🖥️ Build Desktop Applications
    runs-on: ${{ matrix.os }}
    needs: validate-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libnss3-dev libatk-bridge2.0-dev libdrm2 libgtk-3-dev libgbm-dev

      - name: 📥 Install dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../server && npm ci
          cd ../electron-app && npm ci

      - name: 🏗️ Build frontend
        run: cd client && npm run build

      - name: 🎨 Generate icons
        run: chmod +x scripts/create-icons.sh && ./scripts/create-icons.sh
        if: matrix.platform != 'windows'

      - name: 🎨 Generate icons (Windows)
        run: |
          # Windows version of icon generation (simplified)
          mkdir -p electron-app/assets
          echo "Icon generation on Windows - using placeholder"
        if: matrix.platform == 'windows'

      - name: 🏗️ Build Electron app
        run: |
          cd electron-app
          
          # Copy built frontend
          mkdir -p resources/client
          cp -r ../client/build/* resources/client/
          
          # Copy server files
          mkdir -p resources/server
          cp -r ../server/* resources/server/
          cd resources/server && npm ci --production && cd ../..
          
          # Build for platform
          if [ "${{ matrix.platform }}" = "windows" ]; then
            npx electron-builder --win
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            npx electron-builder --linux
          elif [ "${{ matrix.platform }}" = "macos" ]; then
            npx electron-builder --mac
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload desktop artifacts
        uses: actions/upload-artifact@v3
        with:
          name: desktop-${{ matrix.platform }}
          path: |
            electron-app/dist/*.exe
            electron-app/dist/*.dmg
            electron-app/dist/*.AppImage
            electron-app/dist/*.deb
            electron-app/dist/*.rpm
            electron-app/dist/*.tar.gz
            electron-app/dist/*.zip
          retention-days: 1

  build-portable-packages:
    name: 📦 Build Portable Packages
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies and build
        run: |
          npm ci
          cd client && npm ci && npm run build

      - name: 📦 Create portable packages
        run: |
          mkdir -p dist/portable
          
          # Windows portable
          mkdir -p dist/portable/windows
          cp -r client/build dist/portable/windows/client
          cp -r server dist/portable/windows/server
          cp mc.exe dist/portable/windows/
          
          cat > dist/portable/windows/start.bat << 'EOF'
          @echo off
          echo Starting S3 Migration Scheduler...
          set NODE_ENV=production
          set PORT=5000
          set DB_PATH=%~dp0data\migrations.db
          set MC_PATH=%~dp0mc.exe
          if not exist data mkdir data
          if not exist logs mkdir logs
          cd server
          if not exist node_modules npm install --production
          start /b node index.js
          timeout /t 3 /nobreak >nul
          start http://localhost:5000
          echo Application started at http://localhost:5000
          pause
          EOF
          
          # Linux portable
          mkdir -p dist/portable/linux
          cp -r client/build dist/portable/linux/client
          cp -r server dist/portable/linux/server
          cp mc dist/portable/linux/
          chmod +x dist/portable/linux/mc
          
          cat > dist/portable/linux/start.sh << 'EOF'
          #!/bin/bash
          echo "Starting S3 Migration Scheduler..."
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          export NODE_ENV=production
          export PORT=5000
          export DB_PATH="$SCRIPT_DIR/data/migrations.db"
          export MC_PATH="$SCRIPT_DIR/mc"
          mkdir -p "$SCRIPT_DIR/data" "$SCRIPT_DIR/logs"
          cd "$SCRIPT_DIR/server"
          [ ! -d "node_modules" ] && npm install --production
          node index.js &
          SERVER_PID=$!
          sleep 3
          if command -v xdg-open > /dev/null; then
            xdg-open http://localhost:5000
          else
            echo "Open http://localhost:5000 in your browser"
          fi
          echo "Application started! Press Ctrl+C to stop."
          trap "kill $SERVER_PID 2>/dev/null; exit 0" INT
          wait $SERVER_PID
          EOF
          chmod +x dist/portable/linux/start.sh
          
          # Create archives
          cd dist/portable
          zip -r ../S3-Migration-Scheduler-Portable-Windows-${{ needs.validate-release.outputs.version }}.zip windows/
          tar -czf ../S3-Migration-Scheduler-Portable-Linux-${{ needs.validate-release.outputs.version }}.tar.gz linux/

      - name: 📤 Upload portable packages
        uses: actions/upload-artifact@v3
        with:
          name: portable-packages
          path: |
            dist/S3-Migration-Scheduler-Portable-*.zip
            dist/S3-Migration-Scheduler-Portable-*.tar.gz
          retention-days: 1

  create-github-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-docker-images, build-desktop-apps, build-portable-packages]
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts

      - name: 📝 Generate release notes
        id: release-notes
        run: |
          # Generate changelog from commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            echo "## 🔄 Changes since $LAST_TAG" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> RELEASE_NOTES.md
          else
            echo "## 🎉 Initial Release" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "First release of S3 Migration Scheduler with comprehensive packaging options." >> RELEASE_NOTES.md
          fi
          
          echo "" >> RELEASE_NOTES.md
          echo "## 📦 Available Downloads" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Desktop Applications" >> RELEASE_NOTES.md
          echo "- **Windows**: .exe installer, portable executable" >> RELEASE_NOTES.md
          echo "- **Linux**: AppImage, .deb, .rpm packages" >> RELEASE_NOTES.md
          echo "- **macOS**: .dmg installer" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Portable Packages" >> RELEASE_NOTES.md
          echo "- **Script-based**: Requires Node.js" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Docker Images" >> RELEASE_NOTES.md
          echo "- \`${{ secrets.DOCKER_HUB_USERNAME }}/s3-migration-scheduler:${{ needs.validate-release.outputs.version }}\`" >> RELEASE_NOTES.md
          echo "- \`${{ secrets.DOCKER_HUB_USERNAME }}/s3-migration-scheduler-backend:${{ needs.validate-release.outputs.version }}\`" >> RELEASE_NOTES.md
          echo "- \`${{ secrets.DOCKER_HUB_USERNAME }}/s3-migration-scheduler-frontend:${{ needs.validate-release.outputs.version }}\`" >> RELEASE_NOTES.md

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          name: S3 Migration Scheduler ${{ needs.validate-release.outputs.version }}
          body_path: RELEASE_NOTES.md
          prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
          files: |
            release-artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: needs.validate-release.outputs.is-prerelease == 'false'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Update README with latest release
        run: |
          # Update download links in README
          sed -i "s/download\/v[0-9]\+\.[0-9]\+\.[0-9]\+/download\/${{ needs.validate-release.outputs.version }}/g" README.md
          
          # Update Docker image tags
          sed -i "s/${{ secrets.DOCKER_HUB_USERNAME }}\/s3-migration-scheduler:[^[:space:]]*/\${{ secrets.DOCKER_HUB_USERNAME }}\/s3-migration-scheduler:${{ needs.validate-release.outputs.version }}/g" README.md DOCKER_DEPLOYMENT.md

      - name: 💾 Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md DOCKER_DEPLOYMENT.md
          git commit -m "docs: update download links for ${{ needs.validate-release.outputs.version }}" || exit 0
          git push

  notify-release:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: always() && needs.create-github-release.result == 'success'
    steps:
      - name: 📢 Notify on Slack
        if: vars.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: 'good',
                title: '🚀 New Release: S3 Migration Scheduler ${{ needs.validate-release.outputs.version }}',
                title_link: 'https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.tag }}',
                fields: [{
                  title: 'Release Type',
                  value: '${{ needs.validate-release.outputs.is-prerelease == "true" && "Pre-release" || "Stable Release" }}',
                  short: true
                }, {
                  title: 'Downloads',
                  value: 'Desktop apps, Docker images, and portable packages available',
                  short: true
                }],
                footer: 'S3 Migration Scheduler',
                ts: Math.floor(Date.now() / 1000)
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}

      - name: 📊 Release Summary
        run: |
          echo "## 🎉 Release ${{ needs.validate-release.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Images | ✅ Published |" >> $GITHUB_STEP_SUMMARY
          echo "| Desktop Apps | ✅ Built |" >> $GITHUB_STEP_SUMMARY
          echo "| Portable Packages | ✅ Created |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ✅ Created |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Available Packages**:" >> $GITHUB_STEP_SUMMARY
          echo "- Desktop applications (Windows, Linux, macOS)" >> $GITHUB_STEP_SUMMARY
          echo "- Docker images (multi-architecture)" >> $GITHUB_STEP_SUMMARY
          echo "- Portable script packages" >> $GITHUB_STEP_SUMMARY